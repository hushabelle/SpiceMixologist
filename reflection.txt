The SpiceMixologist program takes in a user’s spice mix recipe of 5 spices, ranging from the alphabet N to T, and narrows it down with feedback until it matches a specific spice mix blend of particular quantities. It is contained into 5 classes, split into several methods.

The first class, SpiceMix contains 3 methods. SpiceMix; assigns spiceInput to fiveSpices. getSpice; returns the spice at position i. Lastly toString; returns the spices separated by a space.

The second class, Attempt contains 7 methods. Attempt; which is the constructor initialising the spice suggestion and solution. getSpiceMix; returns the suggested spice mix. getNumGood; calculates and returns the number of correct spices, i.e. spices of the right spice(alphabet) and right quantity(position/totalled positions). getNumWrongQuantity; calculates and returns the number of right spice, but wrong quantity. getQuantity; takes in two arguments, spice and suggested to calculate and return the quantity of given spice in the suggestion. isCorrect; returns true if all spices are of correct spice and quantity, vice versa. Lastly toString; which returns feedback in a formatted string.

The third class, SpiceMixGame contains 5 methods. SpiceMixGame; the constructor which takes in a solution argument, initialising solution and head. SpiceMixGame; which does not take in any arguments and generates a random solution. Because we are iterating for a fixed number of spices, 5, a for loop is preferred over a while loop. The java random method is used to generate a number inclusive and between 1 to 6, which will then be added to ‘N’, adding a new random spice to the character array(mix). attemptSpicemix; takes in input spiceMix and creates a new attempt. An if statement is used to store the attempt in a linked list using the ListNode method, then returns true if all spices are of correct spice and quantity, calling the method isCorrect. getPreviousAttempts and getSolution returns previous attempts and the game solution respectively.

The fourth class, ListNode contains 5 methods, two of which are constructors, ListNode; one to initialise a payload and a next, one to initialize a payload and the next to null, which will be the end of the linked list. getPayload and getNext; returns the data(payload) and pointer(next) respectively. toString; returns a string representation of the linked list using a for loop to iterate through the list, adding to the stringBuilder followed by the next line until the last node of the list.

The last class, SpiceMixologistCli contains 2 methods. playGame; sets a flag(endOfGame) to indicate it is not the end of the game. As the game repeats until the condition endOfGame is achieved, a while loop is preferred rather than a for loop. The loop displays the previous attempts if there are, and prompts for new mix suggestions. A scanner is used to extract the characters and store it in a character array(spices). A for loop is used to iterate through the spices array and check if the inputs are of valid spice(character) using a switch case of all possible characters. If the inputs are valid, the method calls attemptSpiceMix to check if the input is correct, returning true to end the game. The main method takes in input of the user suggestion and creates a new game(Game). The method playGame is called.
